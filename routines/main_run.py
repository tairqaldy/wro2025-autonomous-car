#!/usr/bin/env python3
# main_run.py ‚Äî –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º—ã

import sys, time, logging, argparse
from config import DEFAULT_SPEED, PARKING_SPEED, TARGET_DISTANCE_MM, TURNS_PER_LAP, TOTAL_LAPS, DEBUG_MODE
from drive.motors import drive_forward, drive_backward, stop_all, steering_motor
from drive.steering import steer_left, steer_right, steer_straight
from drive.turns import turn_left, turn_right
from sensors.ultrasonic_left import get_distance_left
from sensors.ultrasonic_right import get_distance_right
from sensors.color_line import check_turn_color
from vision.camera_usb import init_camera, capture_frame, release_camera
from vision.obstacle_detection import analyze_obstacle
from vision.parking_detection import detect_parking_zone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª), —É—Ä–æ–≤–µ–Ω—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç DEBUG_MODE
log_level = logging.DEBUG if DEBUG_MODE else logging.INFO
logging.basicConfig(
    level=log_level,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%H:%M:%S",
    handlers=[logging.StreamHandler(sys.stdout),
              logging.FileHandler("run.log", mode="w", encoding="utf-8")]
)

def run_test_mode():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    logging.info("üö¶ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ (—Ä–µ–∂–∏–º 'test')")
    # 1. –¢–µ—Å—Ç –º–æ—Ç–æ—Ä–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
    logging.info("üß™ –¢–µ—Å—Ç: –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥")
    drive_forward(speed=100, duration=2.0)
    stop_all()
    time.sleep(1)
    logging.info("üß™ –¢–µ—Å—Ç: –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥")
    drive_backward(speed=100, duration=2.0)
    stop_all()
    time.sleep(1)
    # 2. –¢–µ—Å—Ç —Ä—É–ª–µ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    logging.info("üß™ –¢–µ—Å—Ç: –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ (—Ä—É–ª—å)")
    steer_left(); time.sleep(1)
    logging.info("üß™ –¢–µ—Å—Ç: –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ (—Ä—É–ª—å)")
    steer_right(); time.sleep(1)
    steer_straight()  # –≤–µ—Ä–Ω—ë–º –∫–æ–ª—ë—Å–∞ –ø—Ä—è–º–æ
    # 3. –¢–µ—Å—Ç —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
    logging.info("üß™ –¢–µ—Å—Ç: —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤—ã–µ –¥–∞—Ç—á–∏–∫–∏")
    left_dist = get_distance_left()
    right_dist = get_distance_right()
    if left_dist >= 0:
        logging.info(f"üîµ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–ª–µ–≤–∞: {left_dist:.2f} –º–º")
    else:
        logging.warning("üîµ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–ª–µ–≤–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    if right_dist >= 0:
        logging.info(f"üü† –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–ø—Ä–∞–≤–∞: {right_dist:.2f} –º–º")
    else:
        logging.warning("üü† –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–ø—Ä–∞–≤–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    # 4. –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã
    logging.info("üß™ –¢–µ—Å—Ç: –∫–∞–º–µ—Ä–∞ Limelight 3A")
    if init_camera():
        frame = capture_frame()
        if frame is not None:
            logging.info("‚úÖ –ö–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
        else:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã")
    else:
        logging.error("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    release_camera()
    # 5. –¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è (—Å—Ç–æ–ª–±–∏–∫–æ–≤) 
    logging.info("üß™ –¢–µ—Å—Ç: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π (—Å—Ç–æ–ª–±–∏–∫–∏)")
    if init_camera():
        direction = analyze_obstacle()
        if direction == "left":
            logging.info("üü¢ –û–±—ä–µ–∑–¥ —Å–ª–µ–≤–∞ (–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ)")
        elif direction == "right":
            logging.info("üü¢ –û–±—ä–µ–∑–¥ —Å–ø—Ä–∞–≤–∞ (–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ)")
        else:
            logging.info("‚úÖ –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    else:
        logging.error("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π")
    release_camera()
    # 6. –¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–π –∑–æ–Ω—ã
    logging.info("üß™ –¢–µ—Å—Ç: –ø–æ–∏—Å–∫ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–π –∑–æ–Ω—ã")
    if init_camera():
        found = detect_parking_zone()
        if found:
            logging.info("üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–æ—á–Ω–∞—è –∑–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            logging.info("‚ùå –ü–∞—Ä–∫–æ–≤–æ—á–Ω–∞—è –∑–æ–Ω–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    else:
        logging.error("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–∞—Ä–∫–æ–≤–∫–∏")
    release_camera()
    logging.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

def run_speed_mode():
    """–ó–∞–ø—É—Å–∫ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –ø—Ä—è–º–æ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏."""
    logging.info("üèÅ –ó–∞–ø—É—Å–∫ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Ä–µ–∂–∏–º 'speed_run')")
    try:
        while True:
            # –ï–¥–µ–º –ø—Ä—è–º–æ –∫–æ—Ä–æ—Ç–∫–∏–º –æ—Ç—Ä–µ–∑–∫–æ–º
            drive_forward(speed=DEFAULT_SPEED, duration=1.2)
            stop_all()
            # –ß—Ç–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞
            left = get_distance_left()
            right = get_distance_right()
            logging.info(f"üìè –£–ª—å—Ç—Ä–∞–∑–≤—É–∫ ‚Äî –õ: {left:.0f} –º–º, –ü: {right:.0f} –º–º")
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä–∏ —Å—Ç–µ–Ω
            if left == -1:   # –ª–µ–≤–∞—è —Å—Ç–µ–Ω–∞ –ø—Ä–æ–ø–∞–ª–∞
                logging.info("üß± –õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞ –Ω–µ –≤–∏–¥–Ω–∞ ‚Äî –ø–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ")
                steer_left(); time.sleep(0.5)
                steer_straight()
            elif right == -1:  # –ø—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞ –ø—Ä–æ–ø–∞–ª–∞
                logging.info("üß± –ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞ –Ω–µ –≤–∏–¥–Ω–∞ ‚Äî –ø–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ")
                steer_right(); time.sleep(0.5)
                steer_straight()
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
            time.sleep(0.2)
    except KeyboardInterrupt:
        logging.info("üõë –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∑–∞–µ–∑–¥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")

def run_main_mode():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–æ–±—ä–µ–∑–¥ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π, –∫—Ä—É–≥–∏, –ø–∞—Ä–∫–æ–≤–∫–∞)."""
    logging.info("üèéÔ∏è –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∑–∞–µ–∑–¥–∞ (—Ä–µ–∂–∏–º 'main')")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    turn_counter = 0
    lap_counter = 0
    steering_angle = 0  # —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —É–≥–æ–ª —Ä—É–ª—è (0 = –ø—Ä—è–º–æ)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ main (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)
    cam_available = init_camera()
    if not cam_available:
        logging.warning("‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ Limelight –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫ –æ–±—ä–µ–∑–¥–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –ø–∞—Ä–∫–æ–≤–∫–∏")
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ —Ç—Ä–∞—Å—Å–µ (–ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã –≤—Å–µ –∫—Ä—É–≥–∏)
        while lap_counter < TOTAL_LAPS:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Å—Ç–∞–ª–æ –ª–∏ –≤—Ä–µ–º—è –ø–æ–≤–µ—Ä–Ω—É—Ç—å (–¥–∞—Ç—á–∏–∫ —Ü–≤–µ—Ç–∞ –∏–ª–∏ –º–µ—Ç–∫–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞)
            turn_signal = check_turn_color()
            if turn_signal in ["left", "right"]:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Å–∏–≥–Ω–∞–ª—É
                if turn_signal == "left":
                    logging.info("üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞–ª–µ–≤–æ")
                    turn_left()
                    logging.info(f"üîÑ –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –í—Å–µ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤: {turn_counter+1}")
                    steering_angle = 0  # –ø–æ—Å–ª–µ –º–∞–Ω–µ–≤—Ä–∞ –≤–µ—Ä–Ω–µ–º —Ä—É–ª—å –ø—Ä—è–º–æ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ)
                else:
                    logging.info("üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞–ø—Ä–∞–≤–æ")
                    turn_right()
                    logging.info(f"üîÑ –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –í—Å–µ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤: {turn_counter+1}")
                    steering_angle = 0
                turn_counter += 1
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∫—Ä—É–≥
                if turn_counter >= TURNS_PER_LAP:
                    lap_counter += 1
                    turn_counter = 0
                    logging.info(f"üèÅ –ö—Ä—É–≥ {lap_counter} –∑–∞–≤–µ—Ä—à—ë–Ω")
                time.sleep(0.5)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ (TURN_DELAY)
                continue  # –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ)
            # –ï—Å–ª–∏ –ø–æ–≤–æ—Ä–æ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –µ–¥–µ–º –ø—Ä—è–º–æ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Ç–µ–Ω–µ
            # –°—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–µ–Ω—ã (–ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
            dist = get_distance_left()  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≤—ã–π –¥–∞–ª—å–Ω–æ–º–µ—Ä –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
            if dist == -1:
                # –°—Ç–µ–Ω–∞ –Ω–µ –≤–∏–¥–Ω–∞ - –µ–¥–µ–º –ø—Ä—è–º–æ
                drive_forward(speed=DEFAULT_SPEED)
                logging.debug("üìè –°—Ç–µ–Ω–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –¥–µ—Ä–∂–∏–º –∫—É—Ä—Å –ø—Ä—è–º–æ")
            elif dist > TARGET_DISTANCE_MM + 5:
                # –†–æ–±–æ—Ç —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –ª–µ–≤–æ–π —Å—Ç–µ–Ω—ã ‚Äî –ø–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ
                steering_motor.run_for_degrees(-5, speed=30)
                steering_angle = max(steering_angle - 5, -25)  # –æ–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è -25¬∞
                drive_forward(speed=DEFAULT_SPEED)
                logging.debug(f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Å–ª–µ–≤–∞ {dist:.0f} –º–º > —Ü–µ–ª–µ–≤–æ–≥–æ ({TARGET_DISTANCE_MM}) ‚Äî –ø–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ –Ω–∞ 5¬∞ (—É–≥–æ–ª —Ä—É–ª—è ~{steering_angle}¬∞)")
            elif dist < TARGET_DISTANCE_MM - 5:
                # –†–æ–±–æ—Ç —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Å—Ç–µ–Ω–µ ‚Äî –ø–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ
                steering_motor.run_for_degrees(5, speed=30)
                steering_angle = min(steering_angle + 5, 25)   # –æ–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è 25¬∞
                drive_forward(speed=DEFAULT_SPEED)
                logging.debug(f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Å–ª–µ–≤–∞ {dist:.0f} –º–º < —Ü–µ–ª–µ–≤–æ–≥–æ ({TARGET_DISTANCE_MM}) ‚Äî –ø–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ –Ω–∞ 5¬∞ (—É–≥–æ–ª —Ä—É–ª—è ~{steering_angle}¬∞)")
            else:
                # –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã ‚Äî –µ–¥–µ–º –ø—Ä—è–º–æ, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞—è —Ä—É–ª—å
                steering_motor.run_to_position(0)
                steering_angle = 0
                drive_forward(speed=DEFAULT_SPEED)
                logging.debug(f"üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Å–ª–µ–≤–∞ {dist:.0f} –º–º –≤ –Ω–æ—Ä–º–µ ‚Äî –¥–µ—Ä–∂–∏–º —Ä–æ–≤–Ω–æ (—É–≥–æ–ª —Ä—É–ª—è {steering_angle}¬∞)")
            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è (—Å—Ç–æ–ª–±–∏–∫–∞) –∫–∞–º–µ—Ä–æ–π, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if cam_available:
                direction = analyze_obstacle()
                if direction:
                    if direction == "right":
                        logging.info("üîÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–æ–ª–±–∏–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—ä–µ–∑–¥ —Å–ø—Ä–∞–≤–∞")
                        # –ú–∞–Ω–µ–≤—Ä: –ø–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ –∏ –æ–±—ä–µ–∑–¥ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —Å–ª–µ–≤–∞ –æ—Ç —Ä–æ–±–æ—Ç–∞
                        steer_right(); steering_angle = 25
                        drive_forward(speed=DEFAULT_SPEED, duration=1.0)
                        stop_all()
                        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ª–µ–≤–æ–π —Å—Ç–µ–Ω–µ –ø–æ—Å–ª–µ –æ–±—Ö–æ–¥–∞
                        steer_left(); steering_angle = -25
                        drive_forward(speed=DEFAULT_SPEED, duration=1.0)
                        stop_all()
                        steer_straight(); steering_angle = 0
                        logging.info("üîÄ –û–±—ä–µ–∑–¥ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —Å–ø—Ä–∞–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ")
                    elif direction == "left":
                        logging.info("üîÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–æ–ª–±–∏–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—ä–µ–∑–¥ —Å–ª–µ–≤–∞")
                        # –ú–∞–Ω–µ–≤—Ä: –ø–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ –∏ –æ–±—ä–µ–∑–¥ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ä–æ–±–æ—Ç–∞
                        steer_left(); steering_angle = -25
                        drive_forward(speed=DEFAULT_SPEED, duration=0.8)
                        stop_all()
                        steer_straight(); steering_angle = 0
                        logging.info("üîÄ –û–±—ä–µ–∑–¥ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —Å–ª–µ–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ")
                    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ—Å–ª–µ –æ–±—ä–µ–∑–¥–∞ —Ä–æ–±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª, –≥–¥–µ —É–ª—å—Ç—Ä–∞–∑–≤—É–∫ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Ç–µ–Ω–µ
            time.sleep(0.1)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (WALL_CORRECTION_DELAY)
        # –í—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –∫—Ä—É–≥–æ–≤
        logging.info(f"üèÅ –í—Å–µ {lap_counter} –∫—Ä—É–≥(–æ–≤) –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–∏—Å–∫ –∑–æ–Ω—ã –ø–∞—Ä–∫–æ–≤–∫–∏...")
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞ –ø–æ –∑–æ–Ω–µ (–µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if cam_available:
            parked = False
            # –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥, –ø–æ–∏—Å–∫ –º–µ—Ç–∫–∏ –ø–∞—Ä–∫–æ–≤–∫–∏
            while not parked:
                found = detect_parking_zone()
                if found:
                    logging.info("üÖøÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–∞—è –∑–æ–Ω–∞! –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∫–æ–≤–∫—É.")
                    stop_all()
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–µ–∑–¥ –≤–ø–µ—Ä–µ–¥ –¥–ª—è –∑–∞–µ–∑–¥–∞ –≤ –∑–æ–Ω—É:
                    drive_forward(speed=PARKING_SPEED, duration=1.0)
                    stop_all()
                    parked = True
                    logging.info("‚úÖ –ü–∞—Ä–∫–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    break
                # –ï—Å–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º—Å—è –Ω–µ–º–Ω–æ–≥–æ –≤–ø–µ—Ä–µ–¥ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                drive_forward(speed=PARKING_SPEED, duration=0.3)
                stop_all()
                time.sleep(0.5)  # –ø–∞—É–∑–∞ (PARKING_DELAY) –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–∞–º–µ—Ä—É –ø–æ—Å–ª–µ –ø–∞—Ä–∫–æ–≤–∫–∏
            release_camera()
        else:
            logging.info("üéó –ü—Ä–æ–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∫–æ–≤–∫–∏ (–∫–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
        logging.info("üèÅ –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")
    except KeyboardInterrupt:
        logging.warning("üõë –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∑–∞–µ–∑–¥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–æ–≤ –≤ –∫–æ–Ω—Ü–µ –∏–ª–∏ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
        stop_all()
        if cam_available:
            release_camera()

if __name__ == "__main__":
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    parser = argparse.ArgumentParser(description="Universal robot script (modes: test, speed_run, main)")
    parser.add_argument("mode", choices=["test", "speed_run", "main"], help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: test / speed_run / main")
    args = parser.parse_args()
    try:
        if args.mode == "test":
            run_test_mode()
        elif args.mode == "speed_run":
            run_speed_mode()
        elif args.mode == "main":
            run_main_mode()
    except KeyboardInterrupt:
        logging.warning("üõë –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        stop_all()
    