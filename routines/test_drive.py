# test_drive.py
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –º–æ—Ç–æ—Ä, —Ä—É–ª–µ–≤–æ–µ, —Å–µ–Ω—Å–æ—Ä—ã, –∫–∞–º–µ—Ä–∞, —Å—Ç–æ–ª–±–∏–∫–∏, –ø–∞—Ä–∫–æ–≤–∫–∞

from drive.motors import drive_forward, drive_backward, stop_all
from drive.steering import steer_left, steer_right, steer_straight
from sensors.ultrasonic_left import get_distance_left
from sensors.ultrasonic_right import get_distance_right
from vision.camera_usb import init_camera, capture_frame, show_live_feed, camera
from vision.obstacle_detection import analyze_obstacle
from vision.parking_detection import detect_parking_zone
import cv2
import time

def test_motors():
    print("\nüß™ –¢–µ—Å—Ç: –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥")
    drive_forward(speed=60, duration=4.0)  # –ë—ã–ª–æ 2.5
    stop_all()
    time.sleep(1)

    print("üß™ –¢–µ—Å—Ç: –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥")
    drive_backward(speed=60, duration=3.5)  # –ë—ã–ª–æ 2.0
    stop_all()
    time.sleep(1)


def test_steering():
    print("\nüß™ –¢–µ—Å—Ç: –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ")
    steer_left()
    time.sleep(1)
    steer_straight()
    time.sleep(1)

    print("üß™ –¢–µ—Å—Ç: –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ")
    steer_right()
    time.sleep(1)
    steer_straight()
    time.sleep(1)

def test_ultrasonic():
    print("\nüß™ –¢–µ—Å—Ç: —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤—ã–µ —Å–µ–Ω—Å–æ—Ä—ã")
    left = get_distance_left()
    right = get_distance_right()
    print(f"üîµ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–ª–µ–≤–∞: {left:.2f} –º–º")
    print(f"üü† –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–ø—Ä–∞–≤–∞: {right:.2f} –º–º")

def test_camera():
    print("\nüß™ –¢–µ—Å—Ç: –∫–∞–º–µ—Ä–∞ USB")
    if init_camera():
        frame = capture_frame()
        if frame is not None:
            print("‚úÖ –ö–∞–¥—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
        else:
            print("‚ö†Ô∏è –ö–∞–¥—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω")
    else:
        print("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    if camera:
        camera.release()
        cv2.destroyAllWindows()

def test_obstacle_detection():
    print("\nüß™ –¢–µ—Å—Ç: –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –ø–æ –∫–∞–º–µ—Ä–µ")
    if not init_camera():
        print("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        return

    direction = analyze_obstacle()
    if direction == "left":
        print("üü¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ —Å–ø—Ä–∞–≤–∞ ‚Äî –æ–±—ä–µ–∑–¥ —Å–ª–µ–≤–∞")
    elif direction == "right":
        print("üü¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ —Å–ª–µ–≤–∞ ‚Äî –æ–±—ä–µ–∑–¥ —Å–ø—Ä–∞–≤–∞")
    else:
        print("‚úÖ –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ‚Äî –æ–±—ä–µ–∑–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

    if camera:
        camera.release()
        cv2.destroyAllWindows()

def test_parking_zone():
    print("\nüß™ –¢–µ—Å—Ç: –ø–æ–∏—Å–∫ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–π –∑–æ–Ω—ã")
    if not init_camera():
        print("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        return

    found = detect_parking_zone()
    if found:
        print("üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–æ—á–Ω–∞—è –∑–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        print("‚ùå –ü–∞—Ä–∫–æ–≤–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

    if camera:
        camera.release()
        cv2.destroyAllWindows()

def run_all_tests():
    print("üö¶ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤:")
    test_motors()
    test_steering()
    test_ultrasonic()
    test_camera()
    test_obstacle_detection()
    test_parking_zone()
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

if __name__ == "__main__":
    run_all_tests()
