# camera_usb.py

import cv2
from config import CAMERA_INDEX, FRAME_WIDTH, FRAME_HEIGHT

camera = None

def init_camera():
    global camera

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
    if camera:
        camera.release()
        cv2.destroyAllWindows()

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /dev/video10)
    camera = cv2.VideoCapture(CAMERA_INDEX)
    camera.set(cv2.CAP_PROP_FRAME_WIDTH, FRAME_WIDTH)
    camera.set(cv2.CAP_PROP_FRAME_HEIGHT, FRAME_HEIGHT)

    if not camera.isOpened():
        print(f"‚ùå –û—à–∏–±–∫–∞: –∫–∞–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ ({CAMERA_INDEX})")
        return False

    print(f"‚úÖ –ö–∞–º–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {CAMERA_INDEX}")
    return True

def capture_frame():
    if not camera:
        print("‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return None

    ret, frame = camera.read()
    if not ret:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –∫–∞–¥—Ä")
        return None

    return frame

def show_live_feed():
    if not init_camera():
        return

    print("üé• –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    while True:
        frame = capture_frame()
        if frame is None:
            break

        cv2.imshow("USB Camera", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    camera.release()
    cv2.destroyAllWindows()
