# camera_usb.py
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–æ–≤ —Å USB-–∫–∞–º–µ—Ä—ã

import cv2
from config import CAMERA_INDEX, FRAME_WIDTH, FRAME_HEIGHT

camera = None  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–º–µ—Ä—ã


def release_camera():
    """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã"""
    global camera
    if camera and camera.isOpened():
        camera.release()
        cv2.destroyAllWindows()
        print("üì∏ –ö–∞–º–µ—Ä–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")


def init_camera():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã"""
    global camera

    # –ï—Å–ª–∏ –∫–∞–º–µ—Ä–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º
    release_camera()

    camera = cv2.VideoCapture(CAMERA_INDEX, cv2.CAP_V4L2)  # –ü—Ä—è–º–æ —É–∫–∞–∑—ã–≤–∞–µ–º backend
    camera.set(cv2.CAP_PROP_FRAME_WIDTH, FRAME_WIDTH)
    camera.set(cv2.CAP_PROP_FRAME_HEIGHT, FRAME_HEIGHT)

    if not camera.isOpened():
        print("‚ùå –û—à–∏–±–∫–∞: –∫–∞–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return False

    print("‚úÖ –ö–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    return True


def capture_frame():
    """–°—á–∏—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã"""
    if not camera or not camera.isOpened():
        print("‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return None

    ret, frame = camera.read()
    if not ret:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –∫–∞–¥—Ä")
        return None

    return frame


def show_live_feed():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ‚Äî –∫–ª–∞–≤–∏—à–∞ 'q'"""
    if not init_camera():
        return

    print("üé• –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    while True:
        frame = capture_frame()
        if frame is None:
            break

        cv2.imshow("Live USB Camera", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    release_camera()
