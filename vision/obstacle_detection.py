# obstacle_detection.py
# –õ–æ–≥–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Ç–æ–ª–±–∏–∫–æ–≤ (–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π) —Å –∫–∞–º–µ—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ñ–æ—Ä–º–µ –∏ —Ä–∞–∑–º–µ—Ä—É

import cv2
import numpy as np
from vision.camera_usb import capture_frame

def analyze_obstacle():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–∑–¥–∞:
    - "left": –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∑–µ–ª—ë–Ω—ã–π —Å—Ç–æ–ª–±–∏–∫ —Å–ø—Ä–∞–≤–∞ (–æ–±—ä–µ–∑–¥ —Å–ª–µ–≤–∞)
    - "right": –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∫—Ä–∞—Å–Ω—ã–π —Å—Ç–æ–ª–±–∏–∫ —Å–ª–µ–≤–∞ (–æ–±—ä–µ–∑–¥ —Å–ø—Ä–∞–≤–∞)
    - None: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
    """
    frame = capture_frame()
    if frame is None:
        return None

    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ (–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –æ—Å–≤–µ—â–µ–Ω–∏–µ)
    red_lower = np.array([0, 100, 100])
    red_upper = np.array([10, 255, 255])
    green_lower = np.array([50, 100, 100])
    green_upper = np.array([80, 255, 255])

    red_mask = cv2.inRange(hsv, red_lower, red_upper)
    green_mask = cv2.inRange(hsv, green_lower, green_upper)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∞—Å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    red_direction = detect_direction_from_mask(red_mask, color_name="red")
    if red_direction:
        return "right"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–µ–ª—ë–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    green_direction = detect_direction_from_mask(green_mask, color_name="green")
    if green_direction:
        return "left"

    return None

def detect_direction_from_mask(mask, color_name="color"):
    """
    –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±–∏–∫–æ–≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ñ–æ—Ä–º—ã –∏ —Ä–∞–∑–º–µ—Ä–∞
    """
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for cnt in contours:
        x, y, w, h = cv2.boundingRect(cnt)
        area = cv2.contourArea(cnt)
        aspect_ratio = h / w if w != 0 else 0

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–ª–æ—â–∞–¥–∏ –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω
        if area > 1000 and 1.3 < aspect_ratio < 3.5:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è: —Å–ª–µ–≤–∞ –∏–ª–∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            if x + w < mask.shape[1] // 2:
                print(f"üü• –û–±–Ω–∞—Ä—É–∂–µ–Ω {color_name} –æ–±—ä–µ–∫—Ç —Å–ª–µ–≤–∞")
                return "left"
            elif x > mask.shape[1] // 2:
                print(f"üü© –û–±–Ω–∞—Ä—É–∂–µ–Ω {color_name} –æ–±—ä–µ–∫—Ç —Å–ø—Ä–∞–≤–∞")
                return "right"

    return None
